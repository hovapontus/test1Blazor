@page "/"
@using System.Diagnostics
@using test1Blazor.Helpers
@inject IJSRuntime JS

<button @onclick="CreateThousandRows">Create 1,000 rows</button>
<button @onclick="CreateTenThousandRows">Create 10,000 rows</button>
<button @onclick="AppendThousandRows">Append 1,000 rows</button>
<button @onclick="UpdateEveryTenthRow">Update every 10th row</button>
<button @onclick="ClearRows">Clear</button>
<button @onclick="SwapRows">Swap Rows</button>


<table class="table table-hover table-striped test-data">
    <tbody>
        @foreach (var row in _rows)
        {
            <Row RowData="row"
                 OnSelectRow="SelectRow"
                 OnDeleteRow="DeleteRow" />
        }
    </tbody>
</table>

@code {
    private List<RowData> _rows = new();
    private int _nextId = 1;

    private static readonly string[] Adjectives = ["pretty", "large", "big", "small", "tall", "short", "long", "handsome", "plain", "quaint", "clean", "elegant", "easy", "angry", "crazy", "helpful", "mushy", "odd", "unsightly", "adorable", "important", "inexpensive", "cheap", "expensive", "fancy"];
    private static readonly string[] Colors = ["red", "yellow", "blue", "green", "pink", "brown", "purple", "brown", "white", "black", "orange"];
    private static readonly string[] Nouns = ["table", "chair", "house", "bbq", "desk", "car", "pony", "cookie", "sandwich", "burger", "pizza", "mouse", "keyboard"];

    private string GenerateRandomLabel() =>
        $"{Adjectives[Random.Shared.Next(Adjectives.Length)]} " +
        $"{Colors[Random.Shared.Next(Colors.Length)]} " +
        $"{Nouns[Random.Shared.Next(Nouns.Length)]}";

    private async Task CreateRows(int count)
    {
        PerformanceNotifier.StartTiming();

        _rows = Enumerable.Range(_nextId, count)
            .Select(id => new RowData
                {
                    Id = id,
                    Label = GenerateRandomLabel()
                }).ToList();

        _nextId += count;
        StateHasChanged();
        await JS.InvokeVoidAsync("notifyUIUpdateComplete");
    }

    private async Task CreateThousandRows() => await CreateRows(1_000);
    private async Task CreateTenThousandRows() => await CreateRows(10_000);

    private async Task AppendThousandRows()
    {
        PerformanceNotifier.StartTiming();

        _rows.AddRange(Enumerable.Range(_nextId, 1_000)
            .Select(id => new RowData
                {
                    Id = id,
                    Label = GenerateRandomLabel()
                }));

        _nextId += 1_000;
        StateHasChanged();
        await JS.InvokeVoidAsync("notifyUIUpdateComplete");
    }

    private async Task UpdateEveryTenthRow()
    {
        PerformanceNotifier.StartTiming();

        for (int i = 0; i < _rows.Count; i += 10)
        {
            _rows[i].Label += " !!!";
        }

        StateHasChanged();
        await JS.InvokeVoidAsync("notifyUIUpdateComplete");
    }

    private async Task ClearRows()
    {
        PerformanceNotifier.StartTiming();
        _rows.Clear();
        _nextId = 1;  // Reset the ID counter
        StateHasChanged();
        await JS.InvokeVoidAsync("notifyUIUpdateComplete");
    }

    private async Task SwapRows()
    {
        if (_rows.Count > 998)
        {
            PerformanceNotifier.StartTiming();
            (_rows[1], _rows[998]) = (_rows[998], _rows[1]);
            StateHasChanged();
            await JS.InvokeVoidAsync("notifyUIUpdateComplete");
        }
    }

    private void SelectRow(int id) => Console.WriteLine($"Row selected: {id}");

    private async Task DeleteRow(int id)
    {
        PerformanceNotifier.StartTiming();
        _rows.RemoveAll(r => r.Id == id);
        StateHasChanged();
        await JS.InvokeVoidAsync("notifyUIUpdateComplete");
    }
}